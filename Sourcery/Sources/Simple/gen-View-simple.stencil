// TODO: Remove this Sourcery mark above
import UIKit

protocol {{argument.className}}ViewProtocol where Self: UIView {
    func setup(delegate: UITableViewDelegate & UITableViewDataSource)
    func setupBackground(with color: UIColor)
    func renderLoading()
    func render(_ errorViewModel: {{argument.className}}ViewModel.Error)
    func render(_ VIEWMODEL: {{argument.className}}ViewModel.Content.VIEWMODEL)
}

final class {{argument.className}}View: UIView, {{argument.className}}ViewProtocol {

    static func make() -> {{argument.className}}ViewProtocol {
        let loadingView = LoadingView()
        let emptyStateView = EmptyStateView()
        let tableView = {{argument.className}}View.tableView()
        let {{ argument.className|lowercase }}View = {{ argument.className }}View(emptyStateView: emptyStateView, loadingView: loadingView, tableView: tableView)
        return {{ argument.className|lowercase }}View
    }

    private static func tableView() -> UITableView {
        let tableView = UITableView()
        return tableView
    }

    // TODO: Check if the components are being declared in the order they are setup
    // TODO: - Remove components are not being used

    private let containerView = UIView()

    private let stackView: UIStackView = {
        let stack = UIStackView()
        return stack
    }()

    private let label1: Label = {
        let label = Label(style: .regular2) // TODO: - Check for the correct label style
        label.textColor = Color.main.lighterFont // TODO: - Check for the correct color
        label.text = L10n.LABEL_TEXT // TODO: - Check for the correct text
        return label
    }()

    private let label2: Label = {
        let label = Label(style: .regular2) // TODO: - Check for the correct label style
        label.textColor = Color.main.lighterFont // TODO: - Check for the correct color
        label.text = L10n.LABEL_TEXT // TODO: - Check for the correct text
        return label
    }()

    private let tableView: UITableView
    private let emptyStateView: EmptyStateView
    private let loadingView: LoadingView

    // TODO: Change this variable name according to the component where it is applied or remove it if there is no need to use it
    private var COMPONENTconstraintGroup = ConstraintGroup()

    init(frame: CGRect = .zero, emptyStateView: EmptyStateView = EmptyStateView(), loadingView: LoadingView = LoadingView(), tableView: UITableView) {
        self.emptyStateView = emptyStateView
        self.loadingView = loadingView
        super.init(frame: frame)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError()
    }

    // TODO: - Pay attention to the hierarchy levels of views and please respect that on the setup methods calls

    private func setup() {
        backgroundColor = .clear
        setupContainerView()
        setupLoadingView()
        setupEmptyStateView()
    }

    private func setupContainerView() {
        addSubview(containerView)
        constrain(containerView, self) { view, superview in
            view.edges == superview.edges
        }
        setupStackView()
    }

    private func setupStackView() {
        containerView.addSubview(stackView)
        constrain(stackView, containerView) { view, superview in
            view.edges == superview.edges
        }
        setupLabel1()
        setupLabel2()
    }

    private func setupLabel1() {
        stackView.addArrangedSubview(label1)
    }

    private func setupLabel2() {
        stackView.addArrangedSubview(label1)
    }

    private func setupLoadingView() {
        addSubview(loadingView)
        constrain(loadingView, self) { view, superview in
            view.edges == superview.edges
        }
    }

    private func setupEmptyStateView() {
        addSubview(emptyStateView)
        constrain(emptyStateView, self) { view, superview in
            view.edges == superview.edges
        }
    }

    func setup(delegate: UITableViewDelegate & UITableViewDataSource) {
        tableView.dataSource = delegate
        tableView.delegate = delegate
    }

    func setupBackground(with color: UIColor) {
        loadingView.bgColor = color
    }

    func renderLoading() {
        emptyStateView.isHidden = true
        loadingView.show(animated: false, opacity: 1)
    }

    func render(_ errorViewModel: {{argument.className}}ViewModel.Error) {
        loadingView.dismiss()
        emptyStateView.isHidden = false
        emptyStateView.render(mode: errorViewModel.mode)
    }

    func render(_ VIEWMODEL: {{argument.className}}ViewModel.Content.VIEWMODEL) {
        loadingView.dismiss()
        emptyStateView.isHidden = true
        tableView.reloadData()
    }
}

